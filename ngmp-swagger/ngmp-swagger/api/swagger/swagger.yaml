swagger: "2.0"
info:
  version: "0.0.1"
  title: Swagger ngmp
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths 
basePath: /
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /products:
    post:
      summary: Add new products
      operationId: addProducts
      consumes:
      - application/json
      - application/xml
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Product objects that needs to be added
        required: true
        schema:
          $ref: '#/definitions/Products'
      responses:
        405:
          description: Invalid input
    get:
      summary: Get existing products
      operationId: getProducts
      produces:
      - application/json
      - application/xml
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Products'
        404:
          description: Page not found
        405:
          description: Validation exception
  /products/{productId}:
    get:
      summary: Get product by ID
      description: Returns a single product
      operationId: getProductById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: productId
        in: path
        description: ID of product to return
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Product'
        400:
          description: Invalid ID supplied
        404:
          description: Product not found
    delete:
      summary: Deletes a product
      operationId: deleteProductet
      produces:
      - application/json
      - application/xml
      parameters:
      - name: productId
        in: path
        description: Product id to delete
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
        400:
          description: Invalid ID supplied
        404:
          description: Product not found
  /products/{productId}/reviews:
    get:
      summary: Get reviews for selected product
      operationId: getReviews
      produces:
      - application/json
      - application/xml
      parameters:
      - name: productId
        in: path
        description: ID of product to get reviews
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Reviews'
  /users:
    post:
      summary: Add users
      operationId: addUsers
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Created user objects
        required: true
        schema:
          $ref: '#/definitions/Users'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Users'
    get:
      summary: Get existing users
      operationId: getUsers
      produces:
      - application/json
      - application/xml
      responses:
        404:
          description: Page not found
        405:
          description: Validation exception
  /user/{userId}:
    get:
      summary: Get user by user id
      operationId: getUserById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: userId
        in: path
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid user id supplied
        404:
          description: User not found
    delete:
      summary: Delete user
      operationId: deleteUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: userId
        in: path
        description: The userId that needs to be deleted
        required: true
        type: string
      responses:
        400:
          description: Invalid userId supplied
        404:
          description: User not found
  /cities:
    get:
      summary: Get existing cities
      operationId: getCities
      produces:
      - application/json
      - application/xml
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Cities'
        404:
          description: Page not found
        405:
          description: Validation exception
  /cities/{cityId}:
    get:
      summary: Get city by id
      operationId: getCityById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: cityId
        in: path
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/City'
        400:
          description: Invalid cityId supplied
        404:
          description: City not found
    delete:
      summary: Delete city
      operationId: deleteCity
      produces:
      - application/json
      - application/xml
      parameters:
      - name: cityId
        in: path
        description: The cityId that needs to be deleted
        required: true
        type: string
      responses:
        400:
          description: Invalid cityId supplied
        404:
          description: City not found
    put:
      summary: Update city
      operationId: updateCity
      produces:
      - application/json
      - application/xml
      parameters:
      - name: cityId
        in: path
        description: The cityId that needs to be updated
        required: true
        type: string
      - in: body
        name: body
        description: City object data to update
        required: true
        schema:
          $ref: '#/definitions/City'
      responses:
        400:
          description: Invalid cityId supplied
        404:
          description: City not found
# complex objects have schema definitions
definitions:
  User:
    type: object
    required:
    - id
    - name
    properties:
      id:
        type: string
      name:
        type: string
      role:
        type: string
    xml:
      name: User
  Users:
    type: array
    items:
      $ref: '#/definitions/User'
    xml:
      name: Users
  Product:
    type: object
    required:
    - id
    - title
    properties:
      id:
        type: string
      reviews:
        type: array
        items:
          type: string
      title:
        type: string
        example: apple    
    xml:
      name: Product
  Products:
    type: array
    items:
      $ref: '#/definitions/Product'
    xml:
      name: Products
  Reviews:
    type: array
    items:
      type: string   
    xml:
      name: Reviews
  City:
    type: object
    required:
    - id
    - name
    - country
    properties:
      id:
        type: string
      name:
        type: string
      country:
        type: string
      capital:
        type: boolean
        default: false
      location:
        type: object
    xml:
      name: City
  Cities:
    type: array
    items:
      $ref: '#/definitions/City'
    xml:
      name: City
